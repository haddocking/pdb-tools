---
name: ci

on:
  pull_request:
    types: [opened, edited, synchronize]
    branches:
      - master
  push:
    branches:
      - master

jobs:
  bump:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Determine bump type from PR title
        id: determine-bump
        run: |
          COMMIT_MSG=$(printf "%s" "${{ github.event.pull_request.title }}")
          echo "PR title: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" =~ ^\[MAJOR\] ]]; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^\[MINOR\] ]]; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^\[PATCH\] ]]; then
            echo "bump-type=patch" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^\[SKIP\] ]]; then
            echo "skip-bump=true" >> $GITHUB_OUTPUT
            echo "::notice::Version bump skipped based on PR title"
            exit 0
          else
            echo "::error::PR title must start with [MAJOR], [MINOR], [PATCH], or [SKIP]"
            exit 1
          fi

  linter:
    runs-on: ubuntu-latest
    needs: [bump]

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install flake8
        shell: bash

      - name: Linter
        run: flake8 .

  test:
    name: test
    needs: [bump]
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade bump2version twine
          python -m pip install --upgrade coverage

      - name: build
        run: |
          python --version
          python setup.py sdist bdist_wheel
          twine check dist/*.whl
          twine check dist/*.tar.gz
          bump2version --dry-run --verbose --allow-dirty patch
          bump2version --dry-run --verbose --allow-dirty minor
          bump2version --dry-run --verbose --allow-dirty major

      - name: install pdb-tools
        run: |
          python -m pip install .

      - name: run tests
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            script -q -e -c "coverage run -m unittest discover -s tests -p 'test_*.py'"
          else
            SKIP_TTY_TESTS=true coverage run -m unittest discover -s tests -p "test_*.py"
          fi
          coverage xml
        shell: bash

      - uses: codacy/codacy-coverage-reporter-action@v1
        if: >-
          ${{ github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage.xml
